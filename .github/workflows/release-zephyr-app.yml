name: Release Zephyr App
# This workflow should trigger on tag push, the tag must be formed like this:
# <project>-<application>-v<major>.<minor>.<patch><release_suffix>
# project, application are mandatory workflow inputs
# major, minor, patch are numerical values
# release suffix could be "-rc.1", "-alpha", ""

on:
  workflow_call:
    inputs:
      app-dir:
        description: 'Base directory to search the tests'
        required: false
        type: string
        default: "."
      board-root-dir:
        description: 'Path to custom boards directory passed to --board-root option'
        required: false
        type: string
      boards:
        description: 'Space separated list of boards to build for'
        required: false
        type: string
      key-file:
        description: 'Path where content of secret signing key is stored'
        required: false
        type: string
      twister-outdir:
        description: 'Twister output directory'
        required: false
        type: string
        default: "twister-out"
      tests-names:
        description: 'Space separated list of test case name to build'
        required: false
        default: ""
        type: string
      fallback-key-file:
        description: 'Key to use as fallback if signing-key is not available (action run from fork)'
        required: false
        type: string
      project:
        description: 'Project name'
        required: true
        type: string
      application:
        description: 'Application Name of the project'
        required: true
        type: string
      integration:
        description: 'Runs twister with --integration flag'
        type: boolean
        default: true
      token-app-id:
        description: 'Github application ID for an optional app to use to request an access token'
        type: string
        required: false
        default: ""

    secrets:
      signing-key:
        description: 'Content of PEM key for which public part is stored in MCUboot firmware, and used to sign applications.'
        required: false
      token-app-private-key:
        description: 'Private key for an optional Github app to use to request an access token'
        required: false


jobs:
  release_infos:
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.release-infos.outputs.semver }}
      sign_version: ${{ steps.release-infos.outputs.sign_version }}
      release_name: ${{ steps.release-infos.outputs.release_name }}
    env:
      TAG_RE: '${{inputs.project}}-${{inputs.application}}-v([0-9]+)\.([0-9]+)\.([0-9]+)(.*)'
      FALLBACK_TAG: "${{inputs.project}}-${{inputs.application}}-v0.0.0-dev"

    steps:
      - name: Github Context
        uses: SiemaApplications/vossloh-gh-actions/debug/show-github-context@sma/extra-artifacts

      # Inject build number into semver.
      - name: Release Infos
        id: release-infos
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            TAG="${{github.ref_name}}"
          else
            TAG="${FALLBACK_TAG}"
          fi
          major=$(echo "${TAG}" | sed -E "s/${TAG_RE}/\1/")
          minor=$(echo "${TAG}" | sed -E "s/${TAG_RE}/\2/")
          patch=$(echo "${TAG}" | sed -E "s/${TAG_RE}/\3/")
          suffix=$(echo "${TAG}" | sed -E "s/${TAG_RE}/\4/")
          build_number="${{github.run_number}}"
          semver="${major}.${minor}.${patch}${suffix}+${build_number}"
          sign_version="${major}.${minor}.${patch}+${build_number}"
          release_name="${{inputs.project}} ${{inputs.application}} ${major}.${minor}.${patch}${suffix}"
          echo "major=${major}"   | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          echo "minor=${minor}"   | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          echo "patch=${patch}"   | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          echo "suffix=${suffix}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          echo "build_number=${build_number}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          echo "semver=${semver}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          echo "sign_version=${sign_version}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          echo "release_name=${release_name}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT

  app_compilation:
    uses: SiemaApplications/vossloh-gh-actions/.github/workflows/twister-signed-compilation.yml@sma/extra-artifacts
    needs: release_infos
    with:
      app-dir: ${{ inputs.app-dir }}
      board-root-dir: ${{ inputs.board-root-dir }}
      boards: ${{ inputs.boards }}
      key-file: ${{ inputs.key-file }}
      twister-outdir: ${{ inputs.twister-outdir }}
      tests-names: ${{ inputs.tests-names }}
      fallback-key-file: ${{ inputs.fallback-key-file }}
      app-version: ${{ needs.release_infos.outputs.semver }}
      integration: ${{ inputs.integration }}
      token-app-id: ${{ inputs.token-app-id }}
    secrets:
      signing-key: ${{ secrets.signing-key }}
      token-app-private-key: ${{ secrets.token-app-private-key }}

  release:
    runs-on: ubuntu-latest
    env:
      ASSETS_PATH: release_assets
      RELEASE_BODY: body.md
    needs:
      - app_compilation
      - release_infos
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        id: download
        with:
          name: ${{needs.app_compilation.outputs.binaries}}
          path: ${{needs.app_compilation.outputs.binaries}}

      - name: Release Body Intro
        run: |
          echo 'Release `${{inputs.application}}` application' | tee -a ${RELEASE_BODY}
          echo 'Applications signed for mcuboot with version: `${{needs.release_infos.outputs.sign_version}}`' | tee -a ${RELEASE_BODY}
          echo '' >> ${RELEASE_BODY}

      - name: Prepare Release Assets
        run: |
          mkdir -p ${ASSETS_PATH}
          twister_json="${{needs.app_compilation.outputs.binaries}}/twister.json"
          find ${{needs.app_compilation.outputs.binaries}}
          builds="$(cat ${twister_json} | jq -r '.testsuites | .[] | select(.status == "passed") | select(length > 0) | {build_dir:(.platform + "/" + .name), board:.platform, name:.name} | @base64')"
          for b in ${builds}; do
            build_dir="${{needs.app_compilation.outputs.binaries}}/$(echo ${b} | base64 --decode | jq -r '.build_dir')"
            board=$(echo ${b} | base64 --decode | jq -r '.board')
            app=$(basename $(echo ${b} | base64 --decode | jq -r '.name'))
            dot_config="${build_dir}/zephyr/.config"
            use_mcuboot=$(cat ${dot_config} | grep -c "CONFIG_BOOTLOADER_MCUBOOT=y" || true)
            assets=""
            binary_prefix="${board}-${app}"
            if [ ${use_mcuboot} -eq 1 ]; then
              infix="-${{needs.release_infos.outputs.semver}}"
              files_ext=".elf .bin .hex .dts ${infix}.signed.bin ${infix}.signed.hex ${infix}.signed.confirmed.bin ${infix}.signed.confirmed.hex"
            else
              files_ext=".elf .bin .hex .dts"
            fi
            echo "Config ${app} for board ${board}" | tee -a ${GITHUB_STEP_SUMMARY} | tee -a ${RELEASE_BODY}
            for ext in ${files_ext}; do
              fw_name="${binary_prefix}${ext}"
              echo "Fetch ${fw_name} from ${build_dir}"
              if [ -f "${ASSETS_PATH}/${fw_name}" ]; then
                echo "::error file=${fw_name}::Asset already exists"
                exit 1
              fi
              cp ${build_dir}/zephyr/${binary_prefix}${ext} ${ASSETS_PATH}/
            done
          done

      - name: Create Release
        uses: ncipollo/release-action@a2e71bdd4e7dab70ca26a852f29600c98b33153e # v1.12.0 (17/05/2023)
        with:
          artifacts: ${{env.ASSETS_PATH}}/*
          tag: ${{github.ref_name}}
          name: ${{needs.release_infos.outputs.release_name}}
          bodyFile: ${{env.RELEASE_BODY}}
