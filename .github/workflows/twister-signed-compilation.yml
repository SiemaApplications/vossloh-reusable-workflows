name: Twister Compilation

on:
  workflow_call:
    inputs:
      manifest:
        description: 'Path to west manifest file'
        required: false
        type: string
        default: 'west.yml'
      app-dir:
        description: 'Base directory to search the tests'
        required: false
        type: string
        default: "."
      board-root-dir:
        description: 'Path to custom boards directory passed to --board-root option'
        required: false
        type: string
      boards:
        description: 'Space separated list of boards to build for'
        required: false
        type: string
      key-file:
        description: 'Path where content of secret signing key is stored'
        required: false
        type: string
      twister-outdir:
        description: 'Twister output directory'
        required: false
        type: string
        default: "twister-out"
      tests-names:
        description: 'Space separated list of test case name to build'
        required: false
        default: ""
        type: string
      fallback-key-file:
        description: 'Key to use as fallback if signing-key is not available (action run from fork)'
        required: false
        type: string
      app-version:
        description: 'Semver for application being compiled, used to sign application'
        required: false
        type: string
        default: ""
      integration:
        description: 'Runs twister with --integration flag'
        type: boolean
        default: true


    secrets:
      signing-key:
        description: 'Content of PEM key for which public part is stored in MCUboot firmware, and used to sign applications.'
        required: false

    outputs:
      binaries:
        description: 'Artifact name containing the binaries'
        value: ${{ jobs.compile.outputs.binaries }}

      binary-list:
        description: 'Json list of binary files (unsigned) produced by this job.'
        value: ${{ jobs.compile.outputs.binary-list }}

      logs:
        description: 'Artifact name containing the build logs'
        value: ${{ jobs.compile.outputs.logs }}

jobs:
  compile:
    name: Twister Signed Compilation
    runs-on: ubuntu-latest
    outputs:
      binaries: ${{ steps.jobs-outputs.outputs.binaries }}
      binary-list: ${{ steps.jobs-outputs.outputs.binary_list }}
      logs: ${{ steps.logs-artifact-name.outputs.logs }}

    container:
      image: ghcr.io/siemaapplications/zephyr-arm-build:v0.0.6
      volumes:
        # When using a custom container, the path of the individuals composite action is not mounted into the target container and needs to be manually provided.
        # See https://github.com/orgs/community/discussions/53771
        - /home/runner/work/_actions/SiemaApplications/vossloh-gh-actions:/home/runner/work/_actions/SiemaApplications/vossloh-gh-actions
    steps:
      - name: Get Repository Name
        id: repo-info
        run: |
          repo_name=$(echo ${{ github.repository }} | cut -d '/' -f 2)
          echo "Repository: ${{ github.repository }}"
          echo "Repository Name: ${repo_name}"
          echo "repo_name=${repo_name}" | tee -a $GITHUB_OUTPUT
          echo "manifest=${repo_name}/${{inputs.manifest}}" |tee -a $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{ steps.repo-info.outputs.repo_name }}

      - name: Cache West Module
        uses: actions/cache@v3
        id: cache
        env:
          cache-name: cache-west-modules
        with:
          path: |
            bootloader/
            modules/
            tools/
            zephyr/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(steps.repo-info.outputs.manifest) }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: West Init
        run: |
          west init -l ${{ steps.repo-info.outputs.repo_name }} --manifest-file ${{inputs.manifest}}

      - name: West Update
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          west update --narrow --fetch-opt=--depth=1

      # Avoid leaking the private key on the command line
      - name: Get Signing Key
        if: ${{ inputs.key-file != '' }}
        shell: python
        env:
          MCUBOOT_KEY: ${{ secrets.signing-key }}
          KEY_FILE: ${{ inputs.key-file }}
        run: |
          import os
          key = os.environ.get('MCUBOOT_KEY')
          key_file = os.environ.get('KEY_FILE')
          with open(key_file, 'w', encoding='utf-8') as outfile:
              outfile.write("%s" % (key))

      - name: Signing Key Fallback
        id: signing-key-info
        if: ${{ inputs.key-file != '' }}
        run: |
          ls -l ${{ inputs.key-file }}
          echo "md5 of ${{ inputs.key-file }}"
          md5sum ${{ inputs.key-file }}
          keyfile_sz=$(ls -l ${{ inputs.key-file }} | awk '{print $5}')
          if [ ${keyfile_sz} -eq 0 ]; then
            if [ -n "${{ inputs.fallback-key-file }}" ]; then
              ln -fs $(realpath "${{ inputs.fallback-key-file }}") ${{ inputs.key-file }}
              echo "::notice file=${{ inputs.fallback-key-file }}::Use signing key fallback"
            else
              echo "::warning file=${{ inputs.key-file }}::No signing key fallback"
              exit 1
            fi
          fi

      - name: Build Logs Artifact name
        id: logs-artifact-name
        run: |
          logs="${{ inputs.twister-outdir }}-build-logs"
          echo "logs=${logs}" | tee -a $GITHUB_OUTPUT

      - name: Twister args
        id: twister-args
        env:
          TESTS_NAMES: ${{inputs.tests-names}}
        run: |
          if [ "${{ inputs.integration }}" = "true" ]; then
            echo "integration=--integration" | tee -a $GITHUB_ENV
          else
            echo "integration=" | tee -a $GITHUB_ENV
          fi
          if [ -n "${{ inputs.board-root-dir }}" ]; then
            echo "board_root=--board-root ${{ inputs.board-root-dir }}" | tee -a $GITHUB_ENV
          else
            echo "board_root=" | tee -a $GITHUB_ENV
          fi
          echo "testsuite_root=--testsuite-root ${{ inputs.app-dir }}" | tee -a $GITHUB_ENV
          echo "outdir=--outdir ${{ inputs.twister-outdir }}" | tee -a $GITHUB_ENV
          testargs=""
          if [ -n "${TESTS_NAMES}" ]; then
            for t in ${TESTS_NAMES}; do
              testargs="${testargs} --test ${t}"
            done
          fi
          platformargs=""
          if [ -n "${{inputs.boards}}" ]; then
            for b in ${{inputs.boards}}; do
              platformargs="${platformargs} --platform ${b}"
            done
          fi
          echo "platformargs=${platformargs}" | tee -a $GITHUB_ENV
          echo "testargs=${testargs}" | tee -a $GITHUB_ENV

      - name: Twister Run
        run: |
          ./zephyr/scripts/twister ${board_root} \
            ${integration} \
            ${outdir} \
            ${testsuite_root} \
            ${testargs} \
            ${platformargs}

      - name: Split semver
        id: split-semver
        if: inputs.app-version != ''
        shell: python
        run: |
          import re
          import os
          semver_re = r"^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"
          version = "${{inputs.app-version}}"
          match = re.search(semver_re, version)
          assert match is not None, "Invalid semver %s" % version
          assert match.group("buildmetadata").isdigit(), "Invalid buildnumber %s" % match.group("buildmetadata")
          with open(os.environ.get('GITHUB_OUTPUT'), 'w', encoding='utf-8') as gh_out:
            gh_out.write("major=%s\n" % match.group("major"))
            gh_out.write("minor=%s\n" % match.group("minor"))
            gh_out.write("patch=%s\n" % match.group("patch"))
            gh_out.write("prerelease=%s\n" % match.group("prerelease"))
            gh_out.write("buildmetadata=%s\n" % match.group("buildmetadata"))

      - name: Sign Application
        if: inputs.app-version != ''
        run: |
          echo "## Sign Applications" | tee -a ${GITHUB_STEP_SUMMARY}
          echo "Version: ${{inputs.app-version}}" | tee -a ${GITHUB_STEP_SUMMARY}
          major="${{steps.split-semver.outputs.major}}"
          minor="${{steps.split-semver.outputs.minor}}"
          patch="${{steps.split-semver.outputs.patch}}"
          prerelease="${{steps.split-semver.outputs.prerelease}}"
          buildmetadata="${{steps.split-semver.outputs.buildmetadata}}"
          sign_version="${major}.${minor}.${patch}+${buildmetadata}"
          echo "Signed version: ${sign_version}"
          twister_json="${{inputs.twister-outdir}}/twister.json"
          builds="$(cat ${twister_json} | jq -r '.testsuites | .[] | select(.status == "passed") | select(length > 0) | {build_dir:(.platform + "/" + .name), board:.platform, name:.name} | @base64')"
          for b in ${builds}; do
            build_dir="${{inputs.twister-outdir}}/$(echo ${b} | base64 --decode | jq -r '.build_dir')"
            board=$(echo ${b} | base64 --decode | jq -r '.board')
            app=$(basename $(echo ${b} | base64 --decode | jq -r '.name'))
            dot_config="${build_dir}/zephyr/.config"
            use_mcuboot=$(cat ${dot_config} | grep -c "CONFIG_BOOTLOADER_MCUBOOT=y" || true)
            if [ ${use_mcuboot} -eq 0 ]; then
              echo "- ${build_dir} : ${board} - ${app} - No MCUboot support skip signing." | tee -a ${GITHUB_STEP_SUMMARY}
              continue
            fi
            echo "- ${build_dir} : ${board} - ${app}" | tee -a ${GITHUB_STEP_SUMMARY}
            signed_prefix="${board}-${app}-${{inputs.app-version}}.signed"
            west sign -d ${build_dir} -t imgtool --tool-path ./bootloader/mcuboot/scripts/imgtool.py \
              --shex ${build_dir}/zephyr/${signed_prefix}.hex \
              --sbin ${build_dir}/zephyr/${signed_prefix}.bin \
              -- --key ${{ inputs.key-file }} --pad --version ${sign_version}
            west sign -d ${build_dir} -t imgtool --tool-path ./bootloader/mcuboot/scripts/imgtool.py \
              --shex ${build_dir}/zephyr/${signed_prefix}.confirmed.hex \
              --sbin ${build_dir}/zephyr/${signed_prefix}.confirmed.bin \
              -- --key ${{ inputs.key-file }} --pad --confirm --version ${sign_version}
          done

      - name: Rename Unsigned Binary
        run: |
          twister_json="${{inputs.twister-outdir}}/twister.json"
          builds="$(cat ${twister_json} | jq -r '.testsuites | .[] | select(.status == "passed") | select(length > 0) | {build_dir:(.platform + "/" + .name), board:.platform, name:.name} | @base64')"
          for b in ${builds}; do
            build_dir="${{inputs.twister-outdir}}/$(echo ${b} | base64 --decode | jq -r '.build_dir')"
            board=$(echo ${b} | base64 --decode | jq -r '.board')
            app=$(basename $(echo ${b} | base64 --decode | jq -r '.name'))
            renamed_prefix="${board}-${app}"
            mv ${build_dir}/zephyr/zephyr.bin ${build_dir}/zephyr/${renamed_prefix}.bin
            mv ${build_dir}/zephyr/zephyr.hex ${build_dir}/zephyr/${renamed_prefix}.hex
            mv ${build_dir}/zephyr/zephyr.elf ${build_dir}/zephyr/${renamed_prefix}.elf
          done

      - name: Compute Job Outputs
        id: jobs-outputs
        run: |
          cd ${{ inputs.twister-outdir }}
          binaries="${{ inputs.twister-outdir }}-binaries"
          binary_list='[]'
          builds="$(cat twister.json | jq -r '.testsuites | .[] | select(.status == "passed") | select(length > 0) | {build_dir:(.platform + "/" + .name), board:.platform, name:.name} | @base64')"
          for b in ${builds}; do
            build_dir="$(echo ${b} | base64 --decode | jq -r '.build_dir')"
            board=$(echo ${b} | base64 --decode | jq -r '.board')
            app=$(basename $(echo ${b} | base64 --decode | jq -r '.name'))
            binary_prefix="${board}-${app}"
            binary_file="${build_dir}/zephyr/${binary_prefix}.bin"
            binary_list=$(echo "${binary_list}" | jq --compact-output --monochrome-output --raw-output " . += [\"${binary_file}\"]")
          done
          echo "binaries=${binaries}" | tee -a $GITHUB_OUTPUT
          echo "binary_list=${binary_list}" | tee -a $GITHUB_OUTPUT

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: ${{ steps.logs-artifact-name.outputs.logs }}
          path: |
            ${{ inputs.twister-outdir }}/**/build.log

      - name: Upload Binaries
        uses: actions/upload-artifact@v3
        with:
          # We don't care of the binaries after the run
          retention-days: 1
          name: ${{ steps.jobs-outputs.outputs.binaries }}
          path: |
            ${{ inputs.twister-outdir }}/twister.json
            ${{ inputs.twister-outdir }}/**/*.bin
            ${{ inputs.twister-outdir }}/**/*.elf
            ${{ inputs.twister-outdir }}/**/*.hex
            ${{ inputs.twister-outdir }}/**/.config
            !${{ inputs.twister-outdir }}/**/zephyr_pre*.elf
            !${{ inputs.twister-outdir }}/**/isrList.bin

      - name: Check Twister Results
        uses: SiemaApplications/vossloh-gh-actions/twister/results-analysis@v5
        with:
          twister-result-file: ${{ inputs.twister-outdir }}/twister.json
